{"version":3,"sources":["components/RandomJoke.js","components/Category.js","containers/App.js","serviceWorker.js","index.js"],"names":["RandomJoke","randomJoke","src","iconUrl","alt","value","Category","categories","selectedCategory","categoryJoke","style","marginTop","className","marginBottom","map","category","i","type","margin","key","onClick","App","onRandomJoke","fetch","then","resp","json","icon_url","id","url","setState","onCategoryJoke","event","target","state","this","paddingLeft","paddingRight","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"qNAceA,EAZI,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WAErB,OACC,6BACC,yBAAKC,IAAKD,EAAWE,QAASC,IAAI,KAClC,6BACC,2BAAIH,EAAWI,UC2BJC,EAjCE,SAAC,GAAoD,IAAlDC,EAAiD,EAAjDA,WAAYC,EAAqC,EAArCA,iBAAkBC,EAAmB,EAAnBA,aAEjD,OACC,yBAAKC,MAAO,CAACC,UAAW,SACvB,wBAAIC,UAAU,MAAd,iBACA,yBAAKA,UAAU,UACZF,MAAO,CAACG,aAAc,WAEvBN,EAAWO,KAAI,SAACC,EAAUC,GACzB,OACC,4BACEC,KAAK,SACLL,UAAU,4CACVF,MAAO,CAACQ,OAAQ,WAChBC,IAAKH,EACLX,MAAOU,EACPK,QAASZ,GACNO,OAMT,6BACC,yBAAKb,IAAKO,EAAaN,QAASC,IAAI,KACpC,6BACC,2BAAIK,EAAaJ,WC0DPgB,EAlFf,kDAEE,aAAe,IAAD,8BACZ,gBAmBFC,aAAe,WACbC,MAAM,2CACHC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAC,GACJ,IAAMxB,EAAa,CACjBE,QAASsB,EAAKE,SACdC,GAAIH,EAAKG,GACTC,IAAKJ,EAAKI,IACVxB,MAAOoB,EAAKpB,OAEd,EAAKyB,SAAS,CAAE7B,WAAYA,QA9BpB,EAkCd8B,eAAiB,SAACC,GAChB,IAAMjB,EAAWiB,EAAMC,OAAO5B,MAE9BkB,MAAM,oDAAsDR,GACzDS,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAC,GACJ,IAAMhB,EAAe,CACnBM,SAAUU,EAAKlB,WAAW,GAC1BJ,QAASsB,EAAKE,SACdC,GAAIH,EAAKG,GACTC,IAAKJ,EAAKI,IACVxB,MAAOoB,EAAKpB,OAEd,EAAKyB,SAAS,CAAErB,aAAcA,QA7ClC,EAAKyB,MAAQ,CACXjC,WAAY,CACVE,QAAS,GACTyB,GAAI,GACJC,IAAK,GACLxB,MAAO,IAETE,WAAY,GACZE,aAAc,CACZM,SAAU,GACVZ,QAAS,GACTyB,GAAI,GACJC,IAAK,GACLxB,MAAO,KAfC,EAFhB,qDAqDY,IAAD,EAC0C8B,KAAKD,MAA9CjC,EADD,EACCA,WAAYM,EADb,EACaA,WAAYE,EADzB,EACyBA,aAEhC,OACE,yBAAKG,UAAU,KACVF,MAAO,CAAC0B,YAAa,OAAQC,aAAc,SAC9C,wBAAIzB,UAAU,MAAd,sBACA,wBAAIA,UAAU,MAAd,eACA,4BAAQA,UAAU,yCACVQ,QAASe,KAAKb,cADtB,aAIA,kBAAC,EAAD,CAAYrB,WAAYA,IACxB,kBAAC,EAAD,CAAUM,WAAYA,EACZC,iBAAkB2B,KAAKJ,eACvBtB,aAAcA,OApEhC,0CA0EuB,IAAD,OAClB0B,KAAKb,eACLC,MAAM,+CACHC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAjB,GAAU,OAAI,EAAKuB,SAAS,CAACvB,WAAYA,WA9ErD,GAAyB+B,aCQLC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.72452b34.chunk.js","sourcesContent":["import React from 'react';\n\nconst RandomJoke = ({ randomJoke }) => {\n\t\n\treturn (\n\t\t<div>\n\t\t\t<img src={randomJoke.iconUrl} alt=\"\"/>\n\t\t\t<div>\n\t\t\t\t<p>{randomJoke.value}</p>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default RandomJoke;","import React from 'react';\n\nconst Category = ({ categories, selectedCategory, categoryJoke }) => {\n\n\treturn (\n\t\t<div style={{marginTop: '3rem'}}>\n\t\t\t<h1 className=\"f3\">Category Joke</h1>\n\t\t\t<div className='ph3 mb4'\n\t\t\t\t\t style={{marginBottom: '0.5rem'}}>\n\t\t\t\t{\n\t\t\t\t\tcategories.map((category, i) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<button \n\t\t\t\t\t\t\t  type=\"button\"\n\t\t\t\t\t\t\t  className=\"f6 br3 ph3 pv2 mb2 dib white bg-dark-blue\"\n\t\t\t\t\t\t\t  style={{margin: '0.25rem'}}\n\t\t\t\t\t\t\t  key={i}\n\t\t\t\t\t\t\t  value={category}\n\t\t\t\t\t\t\t  onClick={selectedCategory}>\n\t\t\t\t\t\t\t    {category}\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t);\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<img src={categoryJoke.iconUrl} alt=\"\"/>\n\t\t\t\t<div>\n\t\t\t\t\t<p>{categoryJoke.value}</p>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default Category;","import React, { Component } from 'react';\nimport RandomJoke from '../components/RandomJoke';\nimport Category from '../components/Category';\n\nexport class App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      randomJoke: {\n        iconUrl: '',\n        id: '',\n        url: '',\n        value: ''\n      },\n      categories: [],\n      categoryJoke: {\n        category: '',\n        iconUrl: '',\n        id: '',\n        url: '',\n        value: ''\n      }\n    };\n  }\n\n  onRandomJoke = () => {\n    fetch('https://api.chucknorris.io/jokes/random')\n      .then(resp => resp.json())\n      .then(resp =>  {\n        const randomJoke = {\n          iconUrl: resp.icon_url,\n          id: resp.id,\n          url: resp.url,\n          value: resp.value\n        }\n        this.setState({ randomJoke: randomJoke });\n      });\n  }\n\n  onCategoryJoke = (event) => {\n    const category = event.target.value;\n\n    fetch('https://api.chucknorris.io/jokes/random?category=' + category)\n      .then(resp => resp.json())\n      .then(resp => {\n        const categoryJoke = {\n          category: resp.categories[0],\n          iconUrl: resp.icon_url,\n          id: resp.id,\n          url: resp.url,\n          value: resp.value\n        }\n        this.setState({ categoryJoke: categoryJoke});\n      });\n  }\n\n  render() {\n    const { randomJoke, categories, categoryJoke } = this.state;\n\n    return (  \n      <div className=\"tc\"\n           style={{paddingLeft: '2rem', paddingRight: '2rem'}}>\n        <h1 className=\"f1\">Chuck Norris Jokes</h1>\n        <h1 className=\"f3\">Random Joke</h1>\n        <button className=\"f6 br3 ph3 pv2 mb2 dib white bg-orange\"\n                onClick={this.onRandomJoke}>\n          Get Joke!\n        </button>\n        <RandomJoke randomJoke={randomJoke}></RandomJoke>\n        <Category categories={categories}\n                  selectedCategory={this.onCategoryJoke}\n                  categoryJoke={categoryJoke}>\n        </Category>\n      </div>\n    );\n  }\n\n  componentDidMount() {\n    this.onRandomJoke();\n    fetch('https://api.chucknorris.io/jokes/categories')\n      .then(resp => resp.json())\n      .then(categories => this.setState({categories: categories}));\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'tachyons';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}